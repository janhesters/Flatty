#!/bin/bash

# ==========================================================
# Flatty - Convert directories into LLM-friendly text files
# ==========================================================
#
# This script scans a directory (and subdirectories),
# then generates consolidated plain text files containing
# source code and text-based files. 
#
# Key Features:
#  - Grouping by directory, file type, or size
#  - Token estimations to split large files
#  - Detailed logging and status messages
#  - Validation, cleanup, and robust error handling
#
# ==========================================================
# 1. Global Behavior: Errors, Cleanup, & Signal Handling
# ==========================================================

# Exit on any error and catch errors in pipes.
set -e
set -o pipefail

# -----------------------
# Error Handler
# -----------------------
handle_error() {
    local line_no=$1
    local error_code=$2
    echo "❌ Error on line ${line_no}: Command exited with status ${error_code}"
    # Here you could add more context or cleanup steps if needed
    exit 1
}
trap 'handle_error ${LINENO} $?' ERR

# -----------------------
# Cleanup Logic
# -----------------------
declare -a cleanup_files=()

cleanup() {
    local exit_code=$?

    # Clean up any temporary files
    if [ ${#cleanup_files[@]} -gt 0 ]; then
        print_status "Cleaning up temporary files..."
        for file in "${cleanup_files[@]}"; do
            [ -f "$file" ] && rm -f "$file"
        done
    fi
    
    # Handle non-zero exit
    if [ $exit_code -ne 0 ]; then
        print_error "Process failed with exit code $exit_code"
    fi
    
    exit $exit_code
}

trap cleanup EXIT
trap 'exit 1' INT TERM


# ==========================================================
# 2. Configuration & Globals
# ==========================================================
# Default output location, token limit, grouping strategy, etc.

OUTPUT_DIR="$HOME/flattened"
SEPARATOR="---"
TOKEN_LIMIT=100000
GROUP_BY="directory"    # Can be: directory, type, or size
VERBOSE=false

# Track files generated by script
declare -a created_files=()

# Common directories or files to exclude
DEFAULT_EXCLUDES=("*.git/*" "*.DS_Store" "*node_modules/*" "*.swiftpm/*")

# Convert our present directory name + timestamp into placeholders
RUN_TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')


# ==========================================================
# 3. Logging & Output Helpers
# ==========================================================
# Provide consistent, visually distinct status messages.

print_status() {
    echo "🔄 $1"
}

print_success() {
    echo "✅ $1"
}

print_info() {
    echo "ℹ️  $1"
}

print_error() {
    echo "❌ $1" >&2
}


# ==========================================================
# 4. Environment & Validation
# ==========================================================
# Check file system conditions, directory emptiness, 
# command availability, etc.

validate_environment() {
    # Ensure the current directory has at least one file
    if [ -z "$(find . -type f -print -quit)" ]; then
        print_error "No files found in directory"
        exit 1
    fi

    # Validate output directory is writable
    if [ ! -w "$(dirname "$OUTPUT_DIR")" ]; then
        print_error "Cannot write to output directory location: $OUTPUT_DIR"
        exit 1
    fi

    # Check required commands
    for cmd in find grep sed tr wc; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            print_error "Required command not found: $cmd"
            exit 1
        fi
    done
}


# ==========================================================
# 5. Token Estimation & Pattern Matching
# ==========================================================
# Estimate tokens for file splitting, and help filter files.

estimate_tokens() {
    local content="$1"
    # Use printf to handle special characters consistently
    local char_count
    char_count=$(printf "%s" "$content" | wc -c | tr -d '[:space:]')
    # Simple heuristic: ~1 token per 4 characters
    echo $((char_count / 4))
}

# Check file patterns, excludes, includes, etc.
matches_patterns() {
    local file="$1"
    local matched=false
    
    # Default excludes first
    for pattern in "${DEFAULT_EXCLUDES[@]}"; do
        if [[ "$file" == $pattern ]]; then
            return 1  # Excluded
        fi
    done
    
    # If no user-specified includes, match all
    if [ ${#INCLUDE_PATTERNS[@]} -eq 0 ]; then
        matched=true
    else
        for pattern in "${INCLUDE_PATTERNS[@]}"; do
            if [[ "$file" == $pattern ]]; then
                matched=true
                break
            fi
        done
    fi
    
    # Then apply excludes
    if [ "$matched" = true ]; then
        for pattern in "${EXCLUDE_PATTERNS[@]}"; do
            if [[ "$file" == $pattern ]]; then
                matched=false
                break
            fi
        done
    fi
    
    [ "$matched" = true ]
}


# ==========================================================
# 6. File Creation and Content Writing
# ==========================================================
# Centralized ways to create, write, and track new files.

create_output_file() {
    local name="$1"
    local type="$2"  # main, chunk, sub-chunk

    local file="${OUTPUT_DIR}/$(basename "$PWD")-${RUN_TIMESTAMP}"
    case "$type" in
        main)
            file+=".txt"
            ;;
        chunk)
            file+="-part${name}.txt"
            ;;
        sub-chunk)
            file+="-part${name}-sub.txt"
            ;;
        *)
            print_error "Invalid file type: $type"
            return 1
            ;;
    esac

    # Use 'noclobber' in a subshell to prevent overwriting if it already exists
    if ! (set -o noclobber; > "$file" 2>/dev/null); then
        print_error "Output file already exists or cannot be created: $file"
        return 1
    fi

    created_files+=("$file")
    echo "$file"
}

write_file_content() {
    local file="$1"
    local output_file="$2"

    # Basic sanity checks
    if [ ! -f "$file" ]; then
        print_error "File not found: $file"
        return 1
    fi
    if [ ! -r "$file" ]; then
        print_error "Cannot read file: $file"
        return 1
    fi

    # Each step includes error checking to prevent silent failures
    echo "$SEPARATOR" >> "$output_file" || {
        print_error "Failed to write separator to output file"
        return 1
    }
    
    echo "$file" >> "$output_file" || {
        print_error "Failed to write filename to output file"
        return 1
    }
    
    echo "$SEPARATOR" >> "$output_file" || {
        print_error "Failed to write separator to output file"
        return 1
    }
    
    cat "$file" >> "$output_file" || {
        print_error "Failed to write file content: $file"
        return 1
    }
    
    echo "" >> "$output_file" || {
        print_error "Failed to write newline to output file"
        return 1
    }
}


# ==========================================================
# 7. Directory Scanning & Data Structures
# ==========================================================
# Gather directory names, token counts, and file lists.

scan_repository() {
    local dir_names_var="$1"
    local dir_tokens_var="$2"
    local dir_files_var="$3"
    
    print_status "Scanning repository structure..."
    
    # Save original IFS
    local old_IFS="$IFS"
    IFS=$'\n'
    
    while IFS= read -r -d $'\n' file; do
        if file "$file" | grep -qE '.*:.*text' && matches_patterns "$file"; then
            local dir
            dir="$(dirname "$file")"
            local tokens
            tokens=$(estimate_tokens "$(cat "$file")")
            
            eval "$dir_names_var+=(\"$dir\")"
            
            eval "$dir_tokens_var+=(\"$tokens\")"
            
            eval "$dir_files_var+=(\"$file\"$'\\n')"
            
            [ "$VERBOSE" = true ] && echo "  Scanning: $file (${tokens} tokens)"
        fi
    done < <(find . -type f | sort)
    
    # Restore original IFS
    IFS="$old_IFS"
}


# ==========================================================
# 8. Single-File Output (Write Entire Repo to One File)
# ==========================================================
# For small repos within the token limit.

write_single_file() {
    local dir_names_var="$1"
    local dir_tokens_var="$2"
    local dir_files_var="$3"

    print_status "Repository fits within token limit. Creating single consolidated file..."
    local current_file
    current_file=$(create_output_file "main" "main") || exit 1

    # Example usage:
    echo "# Project: $(basename "$PWD")" > "$current_file"
    echo "# Generated: $(date)" >> "$current_file"
    # We can’t just say ${dir_names_ref[@]}, so do something like:
    #   eval "local -a dir_array=( \"\${${dir_names_var}[@]}\" )"

    eval "local -a dir_array=( \"\${${dir_names_var}[@]}\" )"
    eval "local -a token_array=( \"\${${dir_tokens_var}[@]}\" )"
    eval "local -a file_list_array=( \"\${${dir_files_var}[@]}\" )"

    # Then iterate over dir_array, etc.
    for ((i=0; i<${#dir_array[@]}; i++)); do
        local dir="${dir_array[i]}"
        echo -e "\n## Directory: $dir" >> "$current_file"

        # read the newline-delimited files for that directory
        local files="${file_list_array[i]}"
        while IFS= read -r f; do
            [ -z "$f" ] && continue
            write_file_content "$f" "$current_file"
        done <<< "$files"
    done
    created_files+=("$current_file")
    print_success "Created: $(basename "$current_file")"
}


# ==========================================================
# 9. Directory-Based Processing
# ==========================================================
# If the repo is large, break it up by directories.

process_by_directory() {
    # Collect data
    declare -a dir_names=()
    declare -a dir_token_counts=()
    declare -a dir_file_lists=()
    
    scan_repository dir_names dir_token_counts dir_file_lists
    
    # Calculate total tokens
    local total_tokens=0
    for ((i=0; i<${#dir_token_counts[@]}; i++)); do
        total_tokens=$((total_tokens + dir_token_counts[i]))
    done
    
    print_info "Found ${#dir_names[@]} directories totaling approximately $total_tokens tokens"
    
    # If everything fits in one file
    if [ "$total_tokens" -le "$TOKEN_LIMIT" ]; then
        write_single_file dir_names dir_token_counts dir_file_lists
        return
    fi

    # Otherwise, process in chunks
    local current_chunk_dirs=()
    local current_chunk_tokens=0
    local chunk_number=1
    
    # Iterate through each directory, grouping them until we reach token limit
    for ((i=0; i<${#dir_names[@]}; i++)); do
        local dir="${dir_names[i]}"
        local dir_token="${dir_token_counts[i]}"
        
        # If adding this directory exceeds the token limit, write out the chunk first
        if [ $((current_chunk_tokens + dir_token)) -gt "$TOKEN_LIMIT" ]; then
            # But only if we actually have something in the chunk
            if [ ${#current_chunk_dirs[@]} -gt 0 ]; then
                write_chunk "$chunk_number" current_chunk_dirs[@] dir_token_counts[@] \
                            dir_names[@] dir_token_counts[@] dir_file_lists[@]
                ((chunk_number++))
                current_chunk_dirs=()
                current_chunk_tokens=0
            fi
            
            # Handle directories that alone exceed the token limit
            if [ "$dir_token" -gt "$TOKEN_LIMIT" ]; then
                write_large_directory "$chunk_number" "$dir" "${dir_file_lists[i]}" dir_token_counts[@]
                ((chunk_number++))
                continue
            fi
        fi
        
        current_chunk_dirs+=("$dir")
        current_chunk_tokens=$((current_chunk_tokens + dir_token))
    done

    # Write the final chunk if needed
    if [ ${#current_chunk_dirs[@]} -gt 0 ]; then
        write_chunk "$chunk_number" current_chunk_dirs[@] dir_token_counts[@] \
                    dir_names[@] dir_token_counts[@] dir_file_lists[@]
    fi
}


# ==========================================================
# 10. Chunk Writing & Large Directory Splits
# ==========================================================
# Support splitting large directories / file sets into sub-chunks.

write_chunk() {
    local chunk_number="$1"
    local -n current_dirs="$2"
    local -n current_dir_tokens="$3"
    local -n dir_names_ref="$4"
    local -n dir_token_counts_ref="$5"
    local -n dir_file_lists_ref="$6"

    # Create a new output file for this chunk
    local output_file
    output_file=$(create_output_file "$chunk_number" "chunk") || exit 1
    local total_chunk_tokens=0
    
    # Write basic metadata
    echo "# Project: $(basename "$PWD")" > "$output_file"
    echo "# Generated: $(date)" >> "$output_file"
    echo "# Chunk: $chunk_number" >> "$output_file"
    
    # Write the complete directory structure
    write_full_directory_structure "$output_file" dir_token_counts_ref
    
    echo -e "\n# Current Chunk Contains:" >> "$output_file"
    for i in "${!current_dirs[@]}"; do
        local dir="${current_dirs[$i]}"
        local dtokens="${current_dir_tokens[$i]}"
        echo "#   ${dir}/ (~${dtokens} tokens)" >> "$output_file"
        total_chunk_tokens=$((total_chunk_tokens + dtokens))
    done
    
    echo -e "\n# Total tokens in chunk: ~$total_chunk_tokens" >> "$output_file"
    echo "---" >> "$output_file"
    
    # Write out the files for each directory in this chunk
    local chunk_file_count=0
    for i in "${!current_dirs[@]}"; do
        local dir="${current_dirs[$i]}"
        echo -e "\n## Directory: $dir" >> "$output_file"

        # Find the index for that directory in the main array
        local found_index=-1
        for idx in "${!dir_names_ref[@]}"; do
            if [ "${dir_names_ref[$idx]}" = "$dir" ]; then
                found_index=$idx
                break
            fi
        done
        
        # Write each file in that directory to the chunk
        if [ "$found_index" -ge 0 ]; then
            while IFS= read -r f; do
                [ -z "$f" ] && continue
                ((chunk_file_count++))
                write_file_content "$f" "$output_file"
            done <<< "${dir_file_lists_ref[$found_index]}"
        fi
    done
    
    # Keep track
    created_files+=("$output_file")
    print_info "Created chunk $chunk_number: $(basename "$output_file") (tokens: $total_chunk_tokens, files: $chunk_file_count)"
}


write_large_directory() {
    local file_counter="$1"
    local dir="$2"
    local file_list="$3"
    local -n dir_tokens_ref="$4"
    
    print_status "Directory '$dir' exceeds token limit, splitting at file level..."
    
    local sub_tokens=0
    local chunk_subfile_count=0
    local part_file
    part_file=$(create_output_file "$file_counter" "sub-chunk") || exit 1
    
    echo "# Project: $(basename "$PWD")" > "$part_file"
    echo "# Generated: $(date)" >> "$part_file"
    
    write_full_directory_structure "$part_file" dir_tokens_ref
    
    echo -e "\n# Splitting Large Directory:" >> "$part_file"
    echo "#   ${dir}/ (~${dir_tokens_ref[$dir]} tokens)" >> "$part_file"
    echo "# Into Multiple Chunks" >> "$part_file"
    echo "---" >> "$part_file"
    
    while IFS= read -r f; do
        [ -z "$f" ] && continue
        local f_tokens
        f_tokens=$(estimate_tokens "$(cat "$f")")
        
        # If adding this file pushes us over the limit, start a new sub-chunk
        if [ $((sub_tokens + f_tokens)) -gt "$TOKEN_LIMIT" ] && [ "$sub_tokens" -gt 0 ]; then
            print_info "Sub-chunk for $dir complete. (tokens: $sub_tokens, files: $chunk_subfile_count)"
            ((file_counter++))
            
            # Start new sub-chunk file
            sub_tokens=0
            chunk_subfile_count=0
            part_file=$(create_output_file "$file_counter" "sub-chunk") || exit 1
            
            echo "# Project: $(basename "$PWD")" > "$part_file"
            echo "# Generated: $(date)" >> "$part_file"
            write_full_directory_structure "$part_file" dir_tokens_ref
            echo -e "\n# Splitting Large Directory (Continued):" >> "$part_file"
            echo "#   ${dir}/ (~${dir_tokens_ref[$dir]} tokens)" >> "$part_file"
            echo "# Chunk $file_counter" >> "$part_file"
            echo "---" >> "$part_file"
        fi
        
        write_file_content "$f" "$part_file"
        sub_tokens=$((sub_tokens + f_tokens))
        ((chunk_subfile_count++))
        
    done <<< "$file_list"

    created_files+=("$part_file")
    print_info "Created sub-chunk: $(basename "$part_file") (directory: $dir, files: $chunk_subfile_count, tokens: $sub_tokens)"
}


# ==========================================================
# 11. Processing by Type (Alternative grouping)
# ==========================================================
# If GROUP_BY=type, group by recognized file extensions.

get_file_type_group() {
    local file="$1"
    case "$file" in
        *.py|*.pyc) echo "python";;
        *.js|*.jsx|*.ts|*.tsx) echo "javascript";;
        *.go) echo "golang";;
        *.rb) echo "ruby";;
        *.java|*.class) echo "java";;
        *.c|*.h) echo "c";;
        *.cpp|*.hpp|*.cc) echo "cpp";;
        *.swift) echo "swift";;
        *.m|*.mm) echo "objective-c";;
        *.html|*.htm) echo "html";;
        *.css|*.scss|*.sass) echo "css";;
        *.md|*.markdown) echo "docs";;
        *.json|*.yaml|*.yml|*.toml) echo "config";;
        *) echo "other";;
    esac
}

process_by_type() {
    local current_file=""
    local current_tokens=0
    local file_counter=1
    local current_type=""
    
    while IFS= read -r -d $'\n' file; do
        if file "$file" | grep -qE '.*:.*text' && matches_patterns "$file"; then
            local type
            type=$(get_file_type_group "$file")

            # If we changed file type or exceeded token limit, start new file
            if [ "$type" != "$current_type" ] || [ $current_tokens -gt $TOKEN_LIMIT ]; then
                current_type="$type"
                file_counter=$((file_counter + 1))
                current_file=$(create_output_file "$file_counter" "$type") || exit 1
                current_tokens=0

                # Write a small header
                echo "# Project: $(basename "$PWD")" > "$current_file"
                echo "# Type: $type" >> "$current_file"
                echo "# Generated: $(date)" >> "$current_file"
                echo "---" >> "$current_file"
            fi

            write_file_content "$file" "$current_file"
            current_tokens=$((current_tokens + $(estimate_tokens "$(cat "$file")")))
            [ "$VERBOSE" = true ] && echo "Processing: $file ($current_tokens tokens)"
        fi
    done < <(find . -type f | sort)
}


# ==========================================================
# 12. Processing by Size (Token Count)
# ==========================================================
# If GROUP_BY=size, process in artificially chunked "parts".

calculate_total_tokens() {
    local total_tokens=0
    local file_count=0
    
    print_status "Analyzing repository size..."
    
    while IFS= read -r -d $'\n' file; do
        if file "$file" | grep -qE '.*:.*text' && matches_patterns "$file"; then
            ((file_count++))
            total_tokens=$((total_tokens + $(estimate_tokens "$(cat "$file")")))
            if [ "$VERBOSE" = true ]; then
                echo "  Scanning: $file"
            fi
        fi
    done < <(find . -type f | sort)
    
    print_info "Found $file_count files totaling approximately $total_tokens tokens"
    echo "$total_tokens"
}

process_by_size() {
    local current_file=""
    local current_tokens=0
    local file_counter=1
    local total_tokens
    
    total_tokens=$(calculate_total_tokens)
    
    # For smaller repositories, just one file
    if [ "$total_tokens" -le "$TOKEN_LIMIT" ]; then
        print_status "Repository fits within token limit. Creating single consolidated file..."
        current_file=$(create_output_file "main" "main") || exit 1
        
        # Basic header
        echo "# Project: $(basename "$PWD")" > "$current_file"
        echo "# Generated: $(date)" >> "$current_file"
        echo "# Total Tokens: ~$total_tokens" >> "$current_file"
        echo "---" >> "$current_file"
        
        local processed_files=0
        while IFS= read -r -d $'\n' file; do
            if file "$file" | grep -qE '.*:.*text' && matches_patterns "$file"; then
                ((processed_files++))
                write_file_content "$f" "$current_file"
                [ "$VERBOSE" = true ] && echo "Processing ($processed_files): $f"
            fi
        done < <(find . -type f | sort)

        print_success "Created: $(basename "$current_file")"
        print_info "Location: $current_file"
        return
    fi
    
    # Otherwise, split multiple files
    print_status "Repository exceeds token limit. Splitting into multiple files..."
    
    while IFS= read -r -d $'\n' file; do
        if file "$file" | grep -qE '.*:.*text' && matches_patterns "$file"; then
            if [ $current_tokens -gt $TOKEN_LIMIT ]; then
                print_info "Created: $(basename "$current_file") (tokens: $current_tokens)"
                file_counter=$((file_counter + 1))
                current_file=$(create_output_file "$file_counter" "chunk") || exit 1
                current_tokens=0
                
                echo "# Project: $(basename "$PWD")" > "$current_file"
                echo "# Part: $file_counter" >> "$current_file"
                echo "# Generated: $(date)" >> "$current_file"
                echo "---" >> "$current_file"
            fi
            
            # If no file yet, create first file
            if [ -z "$current_file" ]; then
                current_file=$(create_output_file "$file_counter" "chunk") || exit 1
                echo "# Project: $(basename "$PWD")" > "$current_file"
                echo "# Part: $file_counter" >> "$current_file"
                echo "# Generated: $(date)" >> "$current_file"
                echo "---" >> "$current_file"
            fi
            
            write_file_content "$file" "$current_file"
            current_tokens=$((current_tokens + $(estimate_tokens "$(cat "$file")")))
            [ "$VERBOSE" = true ] && echo "Processing: $file ($current_tokens tokens)"
        fi
    done < <(find . -type f | sort)
    
    print_success "Created $file_counter files:"
    for ((i=1; i<=$file_counter; i++)); do
        echo "  📄 $(basename "$PWD")-${RUN_TIMESTAMP}-part${i}.txt"
    done
}


# ==========================================================
# 13. Write Full Directory Structure for Context
# ==========================================================
# Embeds a high-level overview tree into each output file.

write_full_directory_structure() {
    local output_file="$1"
    local -n dir_tokens_ref="$2"

    echo -e "\n# Complete Repository Structure:" >> "$output_file"
    echo "# (showing all directories and their token counts)" >> "$output_file"
    
    # Build a sorted list of directory paths from the keys
    local all_dirs=()
    for d in "${!dir_tokens_ref[@]}"; do
        all_dirs+=("$d")
    done
    
    IFS=$'\n' sorted_dirs=($(sort <<< "${all_dirs[*]}"))
    unset IFS
    
    # Print a tree-like structure with token info
    for dir in "${sorted_dirs[@]}"; do
        # Skip the root directory marker
        [ "$dir" = "." ] && continue
        
        # Count path depth
        IFS='/' read -ra parts <<< "$dir"
        local depth=$((${#parts[@]} - 1))
        
        # Build indentation
        local indent=""
        for ((i=0; i<depth; i++)); do
            indent="$indent  "
        done
        
        echo "# ${indent}${parts[-1]}/ (~${dir_tokens_ref[$dir]} tokens)" >> "$output_file"
    done
    
    echo -e "#\n# Current Chunk Contains:" >> "$output_file"
}


# ==========================================================
# 14. Summary Reporting
# ==========================================================
# Provide a final sum of tokens, files, and created outputs.

print_summary() {
    local total_tokens=0
    local total_files=0
    
    for file in "${created_files[@]}"; do
        # Attempt to read one line that includes "tokens"
        local tokens
        tokens=$(grep -m 1 "tokens" "$file" | grep -o "[0-9]\+")
        local file_count
        file_count=$(grep -c "^---$" "$file")
        
        # If tokens is empty, treat as zero
        tokens=${tokens:-0}
        file_count=${file_count:-0}
        
        total_tokens=$((total_tokens + tokens))
        total_files=$((total_files + file_count))
    done
    
    echo -e "\nProcessing Summary:"
    echo "Total Tokens: ~$total_tokens"
    echo "Total Files Processed: $total_files"
    echo "Output Files Created: ${#created_files[@]}"
}


# ==========================================================
# 15. Command-Line Argument Parsing
# ==========================================================

INCLUDE_PATTERNS=()
EXCLUDE_PATTERNS=()

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            # Show usage info and exit
            cat << EOF
Flatty - Convert directories into LLM-friendly text files

Usage: flatty [options] [patterns...]

Options:
    -o, --output-dir DIR     Output directory (default: ~/flattened)
    -g, --group-by MODE      Grouping mode:
                            directory  - Group by directory structure (default)
                            type       - Group by file type
                            size       - Evenly split by token count
    -i, --include PATTERN    Include only files matching pattern
    -x, --exclude PATTERN    Exclude files matching pattern
    -t, --tokens LIMIT       Target token limit per file (default: 100000)
    -v, --verbose            Show detailed progress
    -h, --help               Show this help message

Examples:
    flatty                                    # Process current directory
    flatty -i "*.swift" -i "*.h" -i "*.m"    # Only Swift and Obj-C files
    flatty --group-by type                    # Group similar files together
    flatty --group-by size -t 50000          # Even chunks of 50k tokens
EOF
            exit 0
            ;;
        -o|--output-dir)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        -g|--group-by)
            GROUP_BY="$2"
            shift 2
            ;;
        -i|--include)
            INCLUDE_PATTERNS+=("$2")
            shift 2
            ;;
        -x|--exclude)
            EXCLUDE_PATTERNS+=("$2")
            shift 2
            ;;
        -t|--tokens)
            TOKEN_LIMIT="$2"
            shift 2
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        *)
            # Any leftover arg is interpreted as an include pattern
            INCLUDE_PATTERNS+=("$1")
            shift
            ;;
    esac
done

# Validate token limit
if [[ ! "$TOKEN_LIMIT" =~ ^[0-9]+$ ]] || [ "$TOKEN_LIMIT" -lt 1000 ]; then
    print_error "Token limit must be a positive integer >= 1000"
    exit 1
fi

# Make sure environment is valid
validate_environment || exit 1

# Ensure the output directory exists
mkdir -p "$OUTPUT_DIR"


# ==========================================================
# 16. Main Execution Flow
# ==========================================================
print_status "Starting Flatty..."
print_info "Output directory: $OUTPUT_DIR"
[ "$VERBOSE" = true ] && print_info "Verbose mode enabled"

case $GROUP_BY in
    "directory")
        print_status "Processing by directory structure..."
        process_by_directory
        ;;
    "type")
        print_status "Processing by file type..."
        process_by_type
        ;;
    "size")
        print_status "Processing by size..."
        process_by_size
        ;;
    *)
        print_error "Error: Invalid grouping mode: $GROUP_BY"
        exit 1
        ;;
esac

print_success "Processing complete!"
print_info "Files saved in: $OUTPUT_DIR"

# List all created files
print_success "Created ${#created_files[@]} files:"
for file in "${created_files[@]}"; do
    echo "  📄 $(basename "$file")"
done

# Print final summary of tokens/files
print_summary

